version: '3.8'

services:
  # API 
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: filmarsivi_api
    ports:
      - "8080:8080" 
    environment:
      - ASPNETCORE_ENVIRONMENT=Development 
      - ASPNETCORE_URLS=http://+:8080    
      
      - ConnectionStrings__PostgreSQLConnection=Host=db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ConnectionStrings__RedisConnection=cache:6379

      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER} 
      - Jwt__Audience=${JWT_AUDIENCE} 
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_started # Redis için healthcheck eklemedik, bu yüzden service_started yeterli.
    networks:
      - filmarsivi-network

  # PostgreSQL
  db:
    image: postgres:latest
    container_name: filmarsivi_db
    environment:
      
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - filmarsivi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache
  cache:
    image: redis:latest 
    container_name: filmarsivi_cache
    ports:
      - "6379:6379"
    networks:
      - filmarsivi-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  filmarsivi-network: 
    driver: bridge